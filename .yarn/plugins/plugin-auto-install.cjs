var d=!1,w="";module.exports={name:"plugin-auto-install",factory:r=>{let y=r("child_process"),P=r("crypto"),a=r("fs"),c=r("path"),j={validateProject(n){d=!0;let t=l(n);u(t,n)},afterAllInstalled(n){d=!1;let t=l(n);u(t,n)},async wrapScriptExecution(n,t,s,p,o){if(d)return n;try{let e=l(t);try{if(e&&e===S(t))return n}catch{}if(!u(e,t))return n;console.info("plugin-auto-install is running 'yarn install' due to dependency changes."),y.spawnSync("yarn",["install"],{cwd:o.cwd,env:o.env}),console.info("plugin-auto-install finished 'yarn install'.");let i=y.spawnSync("yarn",[p,...o.args],{cwd:o.cwd,env:o.env,stdio:"inherit",shell:!0});return async()=>i.status||0}catch{}return n}};function l(n){try{let t=P.createHash("sha256"),s=c.join(n.cwd,"yarn.lock");a.statSync(s,{throwIfNoEntry:!1})&&t.update(a.readFileSync(s,"utf-8"));for(let o of n.workspaces.map(e=>e.cwd).sort()){let e=c.join(o,"package.json"),i=JSON.parse(a.readFileSync(e,"utf-8")),g=Object.keys(i).filter(h=>h.endsWith("ependencies")),k=[];for(let h of g)k.push(...Object.entries(i[h]).map(([m,H])=>`${m}: ${H}`));t.update(k.sort().join(","))}return t.digest("hex")}catch{}}function S(n){let t=f(n);return a.readFileSync(c.join(t,"hash"),"utf-8")}function u(n,t){if(!n||n===w)return!1;try{let s=f(t);a.mkdirSync(s,{recursive:!0}),a.writeFileSync(c.join(s,"hash"),n),a.writeFileSync(c.join(s,".gitignore"),`.gitignore
hash`),console.info(`plugin-auto-install updated dependency hash: ${n}`),w=n}catch{}return!0}function f(n){return c.join(n.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:j}}};
//# sourceMappingURL=index.cjs.map
