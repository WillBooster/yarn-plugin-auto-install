module.exports={name:"plugin-auto-install",factory:r=>{let p=r("child_process"),S=r("crypto"),a=r("fs"),o=r("path"),l="plugin-auto-install v1.8.1",d=!1,g="",j={validateProject(n){d=!0;let t=h(n);t&&t===u(n)||f(t,n)},afterAllInstalled(n){d=!1;let t=h(n);t&&t===u(n)||f(t,n)},async wrapScriptExecution(n,t,s,w,c){if(d)return n;try{let e=h(t);if(e&&e===u(t)||!f(e,t))return n;console.info(`${l} is running 'yarn install' due to dependency changes.`),p.spawnSync("yarn",["install"],{cwd:c.cwd,env:c.env}),console.info(`${l} finished 'yarn install'.`);let i=p.spawnSync("yarn",[w,...c.args],{cwd:c.cwd,env:c.env,stdio:"inherit",shell:!0});return async()=>i.status||0}catch{}return n}};function h(n){try{let t=S.createHash("sha256"),s=o.join(n.cwd,"yarn.lock");a.statSync(s,{throwIfNoEntry:!1})&&t.update(a.readFileSync(s,"utf-8"));for(let c of n.workspaces.map(e=>e.cwd).sort()){let e=o.join(c,"package.json"),i=JSON.parse(a.readFileSync(e,"utf-8")),m=Object.keys(i).filter(y=>y.endsWith("ependencies")),P=[];for(let y of m)P.push(...Object.entries(i[y]).map(([v,H])=>`${v}: ${H}`));t.update(P.sort().join(","))}return t.digest("hex")}catch{}}function u(n){try{let t=k(n);return a.readFileSync(o.join(t,"hash"),"utf-8")}catch{}}function f(n,t){if(!n||n===g)return!1;try{let s=k(t);a.mkdirSync(s,{recursive:!0}),a.writeFileSync(o.join(s,"hash"),n),a.writeFileSync(o.join(s,".gitignore"),`.gitignore
hash`),console.info(`${l} updated dependency hash: ${n}`),g=n}catch{}return!0}function k(n){return o.join(n.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:j}}};
//# sourceMappingURL=index.cjs.map
