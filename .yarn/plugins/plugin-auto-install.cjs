var u=!1,w="";module.exports={name:"plugin-auto-install",factory:r=>{let d=r("child_process"),P=r("crypto"),e=r("fs"),c=r("path"),j={validateProject(){u=!0},afterAllInstalled(n){u=!1;try{let t=h(n);y(t,n)}catch{}},async wrapScriptExecution(n,t,a,p,o){if(u)return n;try{let s=h(t);try{if(s&&s===S(t))return n}catch{}if(!y(s,t))return n;console.info("plugin-auto-install is running 'yarn install' due to dependency changes."),d.spawnSync("yarn",["install"],{cwd:o.cwd,env:o.env}),console.info("plugin-auto-install finished 'yarn install'.");let i=d.spawnSync("yarn",[p,...o.args],{cwd:o.cwd,env:o.env,stdio:"inherit",shell:!0});return async()=>i.status||0}catch{}return n}};function h(n){try{let t=P.createHash("sha256"),a=c.join(n.cwd,"yarn.lock");e.statSync(a,{throwIfNoEntry:!1})&&t.update(e.readFileSync(a,"utf-8"));for(let o of n.workspaces.map(s=>s.cwd).sort()){let s=c.join(o,"package.json"),i=JSON.parse(e.readFileSync(s,"utf-8")),g=Object.keys(i).filter(l=>l.endsWith("ependencies")),k=[];for(let l of g)k.push(...Object.entries(i[l]).map(([m,H])=>`${m}: ${H}`));t.update(k.sort().join(","))}return t.digest("hex")}catch{}}function S(n){let t=f(n);return e.readFileSync(c.join(t,"hash"),"utf-8")}function y(n,t){if(!n||n===w)return!1;let a=f(t);return e.mkdirSync(a,{recursive:!0}),e.writeFileSync(c.join(a,"hash"),n),e.writeFileSync(c.join(a,".gitignore"),`.gitignore
hash`),console.info(`plugin-auto-install updated dependency hash: ${n}`),w=n,!0}function f(n){return c.join(n.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:j}}};
//# sourceMappingURL=index.cjs.map
