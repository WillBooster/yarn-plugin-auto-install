{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport type { Hooks, Project } from '@yarnpkg/core';\n\nmodule.exports = {\n  name: 'plugin-auto-install',\n  factory: () => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const child_process = require('child_process');\n    const crypto = require('crypto');\n    const fs = require('fs');\n    const path = require('path');\n\n    function calcPackageHash(project: Project): string | void {\n      try {\n        const packageAndLockFiles: string[] = [path.join(project.cwd, 'yarn.lock')];\n        for (const workspace of project.workspaces) {\n          packageAndLockFiles.push(path.join(workspace.cwd, 'package.json'));\n        }\n        packageAndLockFiles.sort();\n\n        const hash = crypto.createHash('sha256');\n        for (const file of packageAndLockFiles) {\n          const stat = fs.statSync(file, { throwIfNoEntry: false });\n          if (!stat) continue;\n          hash.update(stat.mtimeMs.toString());\n        }\n        return hash.digest('hex');\n      } catch (_) {\n        // do nothing\n      }\n    }\n\n    function readPackageHash(project: Project): string {\n      const hashDir = getHashDirPath(project);\n      return fs.readFileSync(path.join(hashDir, 'hash'), 'utf-8');\n    }\n\n    function writePackageHash(hash: string, project: Project): void {\n      const hashDir = getHashDirPath(project);\n      fs.mkdirSync(hashDir, { recursive: true });\n      fs.writeFileSync(path.join(hashDir, 'hash'), hash);\n      fs.writeFileSync(path.join(hashDir, '.gitignore'), 'hash');\n    }\n\n    function getHashDirPath(project: Project): string {\n      return path.join(project.cwd, '.yarn', 'plugins', 'plugin-auto-install');\n    }\n\n    const hooks: Hooks = {\n      afterAllInstalled(project) {\n        try {\n          const hash = calcPackageHash(project);\n          if (hash) writePackageHash(hash, project);\n        } catch (_) {\n          // do nothing\n        }\n      },\n      async wrapScriptExecution(executor, project): Promise<() => Promise<number>> {\n        try {\n          const hash = calcPackageHash(project);\n          try {\n            if (hash && hash === readPackageHash(project)) return executor;\n          } catch (_) {\n            // do nothing\n          }\n          console.info('plugin-auto-install detects changes in package.json and/or yarn.lock.');\n          if (hash) writePackageHash(hash, project);\n          child_process.spawnSync('yarn', ['install'], { env: process.env, stdio: 'inherit' });\n        } catch (_) {\n          // do nothing\n        }\n        return executor;\n      },\n    };\n    return { hooks };\n  },\n};\n"],
  "mappings": "AAIA,OAAO,QAAU,CACf,KAAM,sBACN,QAAS,IAAM,CAEb,GAAM,GAAgB,QAAQ,iBACxB,EAAS,QAAQ,UACjB,EAAK,QAAQ,MACb,EAAO,QAAQ,QAErB,WAAyB,EAAiC,CACxD,GAAI,CACF,GAAM,GAAgC,CAAC,EAAK,KAAK,EAAQ,IAAK,cAC9D,OAAW,KAAa,GAAQ,WAC9B,EAAoB,KAAK,EAAK,KAAK,EAAU,IAAK,iBAEpD,EAAoB,OAEpB,GAAM,GAAO,EAAO,WAAW,UAC/B,OAAW,KAAQ,GAAqB,CACtC,GAAM,GAAO,EAAG,SAAS,EAAM,CAAE,eAAgB,KACjD,AAAI,CAAC,GACL,EAAK,OAAO,EAAK,QAAQ,YAE3B,MAAO,GAAK,OAAO,YACnB,GAKJ,WAAyB,EAA0B,CACjD,GAAM,GAAU,EAAe,GAC/B,MAAO,GAAG,aAAa,EAAK,KAAK,EAAS,QAAS,SAGrD,WAA0B,EAAc,EAAwB,CAC9D,GAAM,GAAU,EAAe,GAC/B,EAAG,UAAU,EAAS,CAAE,UAAW,KACnC,EAAG,cAAc,EAAK,KAAK,EAAS,QAAS,GAC7C,EAAG,cAAc,EAAK,KAAK,EAAS,cAAe,QAGrD,WAAwB,EAA0B,CAChD,MAAO,GAAK,KAAK,EAAQ,IAAK,QAAS,UAAW,uBA6BpD,MAAO,CAAE,MA1BY,CACnB,kBAAkB,EAAS,CACzB,GAAI,CACF,GAAM,GAAO,EAAgB,GAC7B,AAAI,GAAM,EAAiB,EAAM,QACjC,SAIE,qBAAoB,EAAU,EAAyC,CAC3E,GAAI,CACF,GAAM,GAAO,EAAgB,GAC7B,GAAI,CACF,GAAI,GAAQ,IAAS,EAAgB,GAAU,MAAO,QACtD,EAGF,QAAQ,KAAK,yEACT,GAAM,EAAiB,EAAM,GACjC,EAAc,UAAU,OAAQ,CAAC,WAAY,CAAE,IAAK,QAAQ,IAAK,MAAO,iBACxE,EAGF,MAAO",
  "names": []
}
