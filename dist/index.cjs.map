{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport type { Hooks, Project } from '@yarnpkg/core';\n\nlet installing = false;\nlet lastHash = '';\n\nmodule.exports = {\n  name: 'plugin-auto-install',\n  factory: (require: any) => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const child_process = require('child_process');\n    const crypto = require('crypto');\n    const fs = require('fs');\n    const path = require('path');\n\n    const hooks: Hooks = {\n      validateProject() {\n        installing = true;\n      },\n      afterAllInstalled(project) {\n        installing = false;\n        try {\n          const hash = calcPackageHash(project);\n          writePackageHash(hash, project);\n        } catch (_) {\n          // do nothing\n        }\n      },\n      async wrapScriptExecution(executor, project, locator, scriptName, extra): Promise<() => Promise<number>> {\n        if (installing) return executor;\n\n        try {\n          const hash = calcPackageHash(project);\n          try {\n            if (hash && hash === readPackageHash(project)) return executor;\n          } catch (_) {\n            // do nothing\n          }\n          // Update hash to avoid a infinite loop\n          if (!writePackageHash(hash, project)) return executor;\n          console.info(`plugin-auto-install is running 'yarn install' due to dependency changes.`);\n          child_process.spawnSync('yarn', ['install'], { cwd: extra.cwd, env: extra.env });\n          console.info(`plugin-auto-install finished 'yarn install'.`);\n          const ret = child_process.spawnSync('yarn', [scriptName, ...extra.args], {\n            cwd: extra.cwd,\n            env: extra.env,\n            stdio: 'inherit',\n            shell: true, // Required to avoid the tsc error (TS6231)\n          });\n          return async () => ret.status || 0;\n        } catch (_) {\n          // do nothing\n        }\n        return executor;\n      },\n    };\n\n    function calcPackageHash(project: Project): string | undefined {\n      try {\n        const hash = crypto.createHash('sha256');\n        const yarnLockFile = path.join(project.cwd, 'yarn.lock');\n        const stat = fs.statSync(yarnLockFile, { throwIfNoEntry: false });\n        if (stat) {\n          hash.update(fs.readFileSync(yarnLockFile, 'utf-8'));\n        }\n\n        for (const workspacePath of project.workspaces.map((w) => w.cwd).sort()) {\n          const packageJsonFile = path.join(workspacePath, 'package.json');\n          const packageJson = JSON.parse(fs.readFileSync(packageJsonFile, 'utf-8'));\n          const depsKeys = Object.keys(packageJson).filter((key) => key.endsWith('ependencies'));\n          const deps: string[] = [];\n          for (const key of depsKeys) {\n            deps.push(...Object.entries(packageJson[key]).map(([name, ver]) => `${name}: ${ver}`));\n          }\n          hash.update(deps.sort().join(','));\n        }\n        return hash.digest('hex');\n      } catch (_) {\n        // do nothing\n      }\n    }\n\n    function readPackageHash(project: Project): string {\n      const hashDir = getHashDirPath(project);\n      return fs.readFileSync(path.join(hashDir, 'hash'), 'utf-8');\n    }\n\n    function writePackageHash(hash: string | undefined, project: Project): boolean {\n      if (!hash || hash === lastHash) return false;\n\n      const hashDir = getHashDirPath(project);\n      fs.mkdirSync(hashDir, { recursive: true });\n      fs.writeFileSync(path.join(hashDir, 'hash'), hash);\n      fs.writeFileSync(path.join(hashDir, '.gitignore'), '.gitignore\\nhash');\n      console.info(`plugin-auto-install updated dependency hash: ${hash}`);\n      lastHash = hash;\n      return true;\n    }\n\n    function getHashDirPath(project: Project): string {\n      return path.join(project.cwd, '.yarn', 'plugins', 'plugin-auto-install');\n    }\n    return { hooks };\n  },\n};\n"],
  "mappings": "AAIA,GAAI,GAAa,GACb,EAAW,GAEf,OAAO,QAAU,CACf,KAAM,sBACN,QAAS,AAAC,GAAiB,CAEzB,GAAM,GAAgB,EAAQ,iBACxB,EAAS,EAAQ,UACjB,EAAK,EAAQ,MACb,EAAO,EAAQ,QAEf,EAAe,CACnB,iBAAkB,CAChB,EAAa,IAEf,kBAAkB,EAAS,CACzB,EAAa,GACb,GAAI,CACF,GAAM,GAAO,EAAgB,GAC7B,EAAiB,EAAM,QACvB,SAIE,qBAAoB,EAAU,EAAS,EAAS,EAAY,EAAuC,CACvG,GAAI,EAAY,MAAO,GAEvB,GAAI,CACF,GAAM,GAAO,EAAgB,GAC7B,GAAI,CACF,GAAI,GAAQ,IAAS,EAAgB,GAAU,MAAO,QACtD,EAIF,GAAI,CAAC,EAAiB,EAAM,GAAU,MAAO,GAC7C,QAAQ,KAAK,4EACb,EAAc,UAAU,OAAQ,CAAC,WAAY,CAAE,IAAK,EAAM,IAAK,IAAK,EAAM,MAC1E,QAAQ,KAAK,gDACb,GAAM,GAAM,EAAc,UAAU,OAAQ,CAAC,EAAY,GAAG,EAAM,MAAO,CACvE,IAAK,EAAM,IACX,IAAK,EAAM,IACX,MAAO,UACP,MAAO,KAET,MAAO,UAAY,EAAI,QAAU,OACjC,EAGF,MAAO,KAIX,WAAyB,EAAsC,CAC7D,GAAI,CACF,GAAM,GAAO,EAAO,WAAW,UACzB,EAAe,EAAK,KAAK,EAAQ,IAAK,aAE5C,AAAI,AADS,EAAG,SAAS,EAAc,CAAE,eAAgB,MAEvD,EAAK,OAAO,EAAG,aAAa,EAAc,UAG5C,OAAW,KAAiB,GAAQ,WAAW,IAAI,AAAC,GAAM,EAAE,KAAK,OAAQ,CACvE,GAAM,GAAkB,EAAK,KAAK,EAAe,gBAC3C,EAAc,KAAK,MAAM,EAAG,aAAa,EAAiB,UAC1D,EAAW,OAAO,KAAK,GAAa,OAAO,AAAC,GAAQ,EAAI,SAAS,gBACjE,EAAiB,GACvB,OAAW,KAAO,GAChB,EAAK,KAAK,GAAG,OAAO,QAAQ,EAAY,IAAM,IAAI,CAAC,CAAC,EAAM,KAAS,GAAG,MAAS,MAEjF,EAAK,OAAO,EAAK,OAAO,KAAK,MAE/B,MAAO,GAAK,OAAO,YACnB,GAKJ,WAAyB,EAA0B,CACjD,GAAM,GAAU,EAAe,GAC/B,MAAO,GAAG,aAAa,EAAK,KAAK,EAAS,QAAS,SAGrD,WAA0B,EAA0B,EAA2B,CAC7E,GAAI,CAAC,GAAQ,IAAS,EAAU,MAAO,GAEvC,GAAM,GAAU,EAAe,GAC/B,SAAG,UAAU,EAAS,CAAE,UAAW,KACnC,EAAG,cAAc,EAAK,KAAK,EAAS,QAAS,GAC7C,EAAG,cAAc,EAAK,KAAK,EAAS,cAAe;AAAA,OACnD,QAAQ,KAAK,gDAAgD,KAC7D,EAAW,EACJ,GAGT,WAAwB,EAA0B,CAChD,MAAO,GAAK,KAAK,EAAQ,IAAK,QAAS,UAAW,uBAEpD,MAAO,CAAE",
  "names": []
}
