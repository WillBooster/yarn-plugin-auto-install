module.exports={name:"plugin-auto-install",factory:e=>{let h=e("child_process"),k=e("crypto"),o=e("fs"),i=e("path");function u(t){try{let n=k.createHash("sha256"),a=i.join(t.cwd,"yarn.lock");o.statSync(a,{throwIfNoEntry:!1})&&n.update(o.readFileSync(a,"utf-8"));for(let c of t.workspaces.map(s=>s.cwd).sort()){let s=i.join(c,"package.json"),r=JSON.parse(o.readFileSync(s,"utf-8")),g=Object.keys(r).filter(l=>l.endsWith("ependencies")),f=[];for(let l of g)f.push(...Object.entries(r[l]).map(([j,P])=>`${j}: ${P}`));n.update(f.sort().join(","))}return n.digest("hex")}catch{}}function w(t){let n=y(t);return o.readFileSync(i.join(n,"hash"),"utf-8")}function p(t,n){let a=y(n);o.mkdirSync(a,{recursive:!0}),o.writeFileSync(i.join(a,"hash"),t),o.writeFileSync(i.join(a,".gitignore"),`.gitignore
hash`),console.info(`plugin-auto-install updated hash: ${t}`)}function y(t){return i.join(t.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:{afterAllInstalled(t){try{let n=u(t);n&&p(n,t)}catch{}},async wrapScriptExecution(t,n,a,d,c){try{let s=u(n);try{if(s&&s===w(n))return t}catch{}console.info("plugin-auto-install detects changes in package.json and/or yarn.lock."),s&&p(s,n),console.info("plugin-auto-install is running 'yarn install"),h.spawnSync("yarn",["install"],{cwd:c.cwd,env:c.env}),console.info("plugin-auto-install finished 'yarn install");let r=h.spawnSync("yarn",[d,...c.args],{cwd:c.cwd,env:c.env,stdio:"inherit",shell:!0});return async()=>r.status||0}catch{}return t}}}}};
//# sourceMappingURL=index.cjs.map
