module.exports={name:"plugin-auto-install",factory:()=>{let f=require("child_process"),y=require("crypto"),o=require("fs"),r=require("path");function i(n){try{let t=y.createHash("sha256"),s=o.statSync(r.join(n.cwd,"yarn.lock"),{throwIfNoEntry:!1});s&&t.update(s.mtimeMs.toString());for(let p of n.workspaces.map(e=>e.cwd).sort()){let e=r.join(p,"package.json"),l=JSON.parse(o.readFileSync(e,"utf-8")),d=Object.keys(l).filter(a=>a.endsWith("ependencies")),u=[];for(let a of d)u.push(...Object.entries(l[a]).map(([k,m])=>`${k}: ${m}`));t.update(u.sort().join(","))}return t.digest("hex")}catch{}}function g(n){let t=h(n);return o.readFileSync(r.join(t,"hash"),"utf-8")}function c(n,t){let s=h(t);o.mkdirSync(s,{recursive:!0}),o.writeFileSync(r.join(s,"hash"),n),o.writeFileSync(r.join(s,".gitignore"),"hash"),console.info(`plugin-auto-install updated hash: ${n}`)}function h(n){return r.join(n.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:{afterAllInstalled(n){try{let t=i(n);t&&c(t,n)}catch{}},async wrapScriptExecution(n,t){try{let s=i(t);try{if(s&&s===g(t))return n}catch{}console.info("plugin-auto-install detects changes in package.json and/or yarn.lock."),s&&c(s,t),f.spawnSync("yarn",["install"],{env:process.env,stdio:"inherit"})}catch{}return n}}}}};
//# sourceMappingURL=index.cjs.map
