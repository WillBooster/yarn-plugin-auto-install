module.exports={name:"plugin-auto-install",factory:()=>{let u=require("child_process"),y=require("crypto"),r=require("fs"),c=require("path");function p(t){try{let n=y.createHash("sha256"),o=r.statSync(c.join(t.cwd,"yarn.lock"),{throwIfNoEntry:!1});o&&n.update(o.mtimeMs.toString());for(let a of t.workspaces.map(s=>s.cwd).sort()){let s=c.join(a,"package.json"),e=JSON.parse(r.readFileSync(s,"utf-8")),i=Object.keys(e).filter(l=>l.endsWith("ependencies")),h=[];for(let l of i)h.push(...Object.entries(e[l]).map(([k,w])=>`${k}: ${w}`));n.update(h.sort().join(","))}return n.digest("hex")}catch{}}function f(t){let n=g(t);return r.readFileSync(c.join(n,"hash"),"utf-8")}function d(t,n){let o=g(n);r.mkdirSync(o,{recursive:!0}),r.writeFileSync(c.join(o,"hash"),t),r.writeFileSync(c.join(o,".gitignore"),`.gitignore
hash`),console.info(`plugin-auto-install updated hash: ${t}`)}function g(t){return c.join(t.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:{afterAllInstalled(t){try{let n=p(t);n&&d(n,t)}catch{}},async wrapScriptExecution(t,n,o,a,s){try{let e=p(n);try{if(e&&e===f(n))return t}catch{}console.info("plugin-auto-install detects changes in package.json and/or yarn.lock."),e&&d(e,n),u.spawnSync("yarn",["install"],{cwd:s.cwd,env:s.env});let i=u.spawnSync("yarn",[a,s.args],{cwd:s.cwd,env:s.env,stdio:"inherit",shell:"true"});return()=>i.status||0}catch{}return t}}}}};
//# sourceMappingURL=index.cjs.map
