module.exports={name:"plugin-auto-install",factory:r=>{let y=r("child_process"),f=r("crypto"),a=r("fs"),e=r("path");function d(t){try{let n=f.createHash("sha256"),c=a.statSync(e.join(t.cwd,"yarn.lock"),{throwIfNoEntry:!1});c&&n.update(c.mtimeMs.toString());for(let i of t.workspaces.map(s=>s.cwd).sort()){let s=e.join(i,"package.json"),o=JSON.parse(a.readFileSync(s,"utf-8")),h=Object.keys(o).filter(p=>p.endsWith("ependencies")),l=[];for(let p of h)l.push(...Object.entries(o[p]).map(([w,j])=>`${w}: ${j}`));n.update(l.sort().join(","))}return n.digest("hex")}catch{}}function k(t){let n=g(t);return a.readFileSync(e.join(n,"hash"),"utf-8")}function u(t,n){let c=g(n);a.mkdirSync(c,{recursive:!0}),a.writeFileSync(e.join(c,"hash"),t),a.writeFileSync(e.join(c,".gitignore"),`.gitignore
hash`),console.info(`plugin-auto-install updated hash: ${t}`)}function g(t){return e.join(t.cwd,".yarn","plugins","plugin-auto-install")}return{hooks:{afterAllInstalled(t){try{let n=d(t);n&&u(n,t)}catch{}},async wrapScriptExecution(t,n,c,i,s){try{let o=d(n);try{if(o&&o===k(n))return t}catch{}console.info("plugin-auto-install detects changes in package.json and/or yarn.lock."),o&&u(o,n),y.spawnSync("yarn",["install"],{cwd:s.cwd,env:s.env});let h=y.spawnSync("yarn",[i,...s.args],{cwd:s.cwd,env:s.env,stdio:"inherit",shell:!0});return async()=>h.status||0}catch{}return t}}}}};
//# sourceMappingURL=index.cjs.map
